function[connections, list] = gen_phys_connlist_1ch(striatum, connections, attr, flags)
% Assign MSNs as D1 or D2 and to a particular channel

% Append directory for connection lists
listpath = [striatum.dirname 'connection_lists/'];
mkdir(listpath);

% Start list timer
timer.list = tic;

% Create a list of all MSN, FSI, and D1 / D2 neuron IDs (without connections)
% Column 1 is the unique neuron ID in the striatum generated by MatLab
% Column 2 is the neuron's ID within that group required by SpineCreator
list.msn = unique(connections.msnmsn(:,1));
list.d1 = [list.msn(1 : ceil(length(list.msn) / 2))' ; 0 : ceil(length(list.msn) / 2) - 1]';
list.d2 = [list.msn(length(list.d1) + 1 : end)' ; 0 : floor(length(list.msn) / 2) - 1]';
list.fsi = sort(unique([unique(connections.fsifsi(:,1)) ; unique(connections.fsimsn(:,1))]));
list.fsi(:,2) = 0:length(list.fsi) - 1;

% Separate all MSN_MSN connections into D_type lists
timer.chans = tic;
if flags.progress
    fprintf('\nSeparating connections into channels? ');
end
connections.d1.all = connections.msnmsn((connections.msnmsn(:,1) <= max(list.d1(:,1))),:);
connections.d1.d1 = connections.d1.all((connections.d1.all(:,2) <= max(list.d1(:,1))),:);
connections.d1.d2 = connections.d1.all((connections.d1.all(:,2) > max(list.d1(:,1))),:);

connections.d2.all = connections.msnmsn((connections.msnmsn(:,1) > max(list.d1(:,1))),:);
connections.d2.d1 = connections.d2.all((connections.d2.all(:,2) <= max(list.d1(:,1))),:);
connections.d2.d2 = connections.d2.all((connections.d2.all(:,2) > max(list.d1(:,1))),:);

connections.fsi.d1 = connections.fsimsn((connections.fsimsn(:,2) <= max(list.d1(:,1))),:);
connections.fsi.d2 = connections.fsimsn((connections.fsimsn(:,2) > max(list.d1(:,1))),:);
if flags.progress
    fprintf('done! (%3.2fs)\n', toc(timer.chans))
end

% It's useful to know how many of each neuron type there are
num.d1 = size(list.d1, 1);
num.d2 = size(list.d2, 1);
num.msn = size(list.msn, 1);
num.fsi = size(list.fsi, 1);
num.gap = size(connections.gap, 1);

% (Approximate) number of MSNs of each type to leave as background only
num.bkg = round(num.msn * (attr.bkg_msn / 100) / 2);

% (Approximate) number of FSIs to leave as background only
num.bkgfsi = round(num.fsi * (attr.bkg_fsi / 100));

% Number of MSNs of each type to put in each channel
num.msn_ch = floor((num.msn / 2 - num.bkg) / attr.ch_all);

%% CORTICO-STRIATAL channel connections - Uses SpineCreator neuron IDs
if flags.progress
    fprintf('\nCreating connection lists:\n');
    fprintf('1) Cortical channel connections (to %d%% of MSNs, %d%% of FSIs)? ', 100 - attr.bkg_msn, 100 - attr.bkg_fsi)
end
timer.conn1 = tic;
  
% Size of striatal sections
sec.size = attr.size / 10;

% Initialise cortical connection lists
connections.cortex.ch1.d1 = [];
connections.cortex.ch1.d2 = [];
connections.cortex.ch1.fsi = [];

% Initialise neuron lists
list.ch1.d1 = [];
list.ch1.d2 = [];
list.ch1.fsi = [];

for i = 1:10
    for j = 1:10
        for k = 1:10
            xco = sprintf('x%d', i);
            yco = sprintf('y%d', j);
            zco = sprintf('z%d', k);

            sec.xmin = sec.size * i - sec.size;
            sec.ymin = sec.size * j - sec.size;
            sec.zmin = sec.size * k - sec.size;
            sec.xmax = sec.xmin + sec.size;                
            sec.ymax = sec.ymin + sec.size;               
            sec.zmax = sec.zmin + sec.size;

            for m = 1:2
                % Set dynamic structure fieldname
                msn = sprintf('d%d', m);

                % Get all MSNs of each type in each section
                list.(xco).(yco).(zco).(msn) = list.(msn)(...
                    striatum.neurons(list.(msn)(:,1), 1) > sec.xmin & striatum.neurons(list.(msn)(:,1), 1) <= sec.xmax &...
                    striatum.neurons(list.(msn)(:,1), 2) > sec.ymin & striatum.neurons(list.(msn)(:,1), 2) <= sec.ymax &...
                    striatum.neurons(list.(msn)(:,1), 3) > sec.zmin & striatum.neurons(list.(msn)(:,1), 3) <= sec.zmax, :);
                
                % Randomly remove a percentage of MSNs based on BKG percentage attribute
                list.(xco).(yco).(zco).(msn) = ...
                    list.(xco).(yco).(zco).(msn)((rand(size(list.(xco).(yco).(zco).(msn), 1), 1) * 100) > attr.bkg_msn, :);
                
                % Add remaining MSNs to master list of channel MSNs
                list.ch1.(msn) = vertcat(list.ch1.(msn), list.(xco).(yco).(zco).(msn));

                % Connect cortex to MSNs in each section
                if ~isempty(list.(xco).(yco).(zco).(msn))                   
                    connections.cortex.ch1.(msn) = vertcat(connections.cortex.ch1.(msn), ...
                        [size(connections.cortex.ch1.(msn), 1) : size(connections.cortex.ch1.(msn), 1) + ...
                        size(list.(xco).(yco).(zco).(msn)(:,2), 1) - 1 ; list.(xco).(yco).(zco).(msn)(:,2)']');
                end
            end
            
            % Get all FSIs in each section
            list.(xco).(yco).(zco).fsi = list.fsi(...
                striatum.neurons(list.fsi(:,1), 1) > sec.xmin & striatum.neurons(list.fsi(:,1), 1) <= sec.xmax &...
                striatum.neurons(list.fsi(:,1), 2) > sec.ymin & striatum.neurons(list.fsi(:,1), 2) <= sec.ymax &...
                striatum.neurons(list.fsi(:,1), 3) > sec.zmin & striatum.neurons(list.fsi(:,1), 3) <= sec.zmax, :);
            
            % Randomly remove a percentage of FSIs based on BKG percentage attribute
            list.(xco).(yco).(zco).fsi = ...
                list.(xco).(yco).(zco).fsi((rand(size(list.(xco).(yco).(zco).fsi, 1), 1) * 100) > attr.bkg_fsi, :);
            
            % Add remaining FSIs to master list of channel FSIs
            list.ch1.fsi = vertcat(list.ch1.fsi, list.(xco).(yco).(zco).fsi);
            
            % Connect cortex to FSIs in each section
            if ~isempty(list.(xco).(yco).(zco).fsi)                   
                connections.cortex.ch1.fsi = vertcat(connections.cortex.ch1.fsi, ...
                    [size(connections.cortex.ch1.fsi, 1) : size(connections.cortex.ch1.fsi, 1) + ...
                    size(list.(xco).(yco).(zco).fsi(:,2), 1) - 1 ; list.(xco).(yco).(zco).fsi(:,2)']');
            end
        end
    end
end

% % Create channel connections to striatum
% % FROM: Each cortical channel (-1 for SpineCreator 0-indexing)
% % TO:   Each FSI
% % DELAY:N/A
% connections.cortex.ch1.fsi = [0 : num.fsi - 1 ; list.fsi(:,2)']';
%  
% Create background connections to striatum
% FROM: Each background cortical source (-1 for SpineCreator 0-indexing)
% TO:   Each MSN or FSI
% DELAY:N/A
% 
% Commenting out - BKG connections to be made using collapsed method and
% all-to-all connections
% connections.cortex.bkg.d1 = [0 : num.d1 - 1  ; list.d1(:,2)']';
% connections.cortex.bkg.d2 = [0 : num.d2 - 1  ; list.d2(:,2)']';
% connections.cortex.bkg.fsi= [0 : num.fsi - 1 ; list.fsi(:,2)']';
  
% Save connection lists
if flags.save
    % For both D1 and D2 MSNs
    for j = 1:2           
        d_dst = sprintf('d%d', j);
        name.dst = sprintf('Striatum_D%d', j);

        % Create both AMPA and NMDA connections to MSNs
        for k = 0:1          
            % Channel input
%             name.src = sprintf('CH1_input');
            name.src = sprintf('Collapsed');
            name.syn = sprintf('syn%d_bkMSN%d_bkFSI%d', k, attr.bkg_msn, attr.bkg_fsi);
            save_list(listpath, connections.cortex.ch1.(d_dst), name, flags);

%             % Background input
%             name.src = sprintf('BKG_input');
%             name.syn = sprintf('syn%d', k);
%             
%             % If connections already exist, don't recreate
%             if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file') 
%                 save_list(listpath, connections.cortex.bkg.(d_dst), name, flags);
%             end
        end
    end

    % Other populations only use a single synapse
   name.syn = sprintf('syn0_bkMSN%d_bkFSI%d', attr.bkg_msn, attr.bkg_fsi);

    % Cortex-FSI
    name.dst = 'Striatum_FSI';
    
    % Channel input
    name.src = sprintf('CH1_input');    
    try
        save_list(listpath, connections.cortex.ch1.fsi, name, flags);
    catch
    end
    
%     % Channel input
%     name.src = sprintf('BKG_input');
%     name.syn = sprintf('syn0');
%     % If connections already exist, don't recreate
%     if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file') 
%         save_list(listpath, connections.cortex.bkg.fsi, name, flags);
%     end
end
    
if flags.progress
    fprintf('done! (%1.2fs)\n', toc(timer.conn1))
end

%% STRIATAL GABA connections - Converts MatLab to SpineCreator neuron IDs
if flags.progress
    fprintf('2) Striatal GABA connections? ')
end
timer.conn3 = tic;

% From both D1 and D2 MSNs
for i = 1:2
    d_src = sprintf('d%d', i); 
    name.src = sprintf('Striatum_D%d', i);
    
    % GABA projections always use syn0
    name.syn = 'syn0';
       
    % To both D1 and D2 MSNs
    for j = 1:2 
        d_dst = sprintf('d%d',j);
        name.dst = sprintf('Striatum_D%d', j);
        
        % If connections already exist, don't recreate
        if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file')        
            % Convert MatLab neuron IDs to SpineCreator IDs
            [~, src] = ismember(connections.(d_src).(d_dst)(:,1), list.(d_src)(:,1));
            [~, dst] = ismember(connections.(d_src).(d_dst)(:,2), list.(d_dst)(:,1));

            % Create list of undirected MSN-MSN connections
            % FROM: D1 or D2 MSNs
            % TO:   D1 or D2 MSNs
            % DELAY:As defined in connections.(d_src).(d_dst)(:,3)
            connections.gaba.(d_src).(d_dst) = ...
                [list.(d_src)(src,2)' ; list.(d_dst)(dst,2)' ; connections.(d_src).(d_dst)(:,3)']';

            % Save connection lists
            if flags.save
                save_list(listpath, connections.gaba.(d_src).(d_dst), name, flags);
            end
        end
    end
    
    % From FSIs to MSNs
    f_dst = sprintf('d%d', i); 
    name.src = 'Striatum_FSI';
    name.dst = sprintf('Striatum_D%d', i);
    
    % If connections already exist, don't recreate
    if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file') 
        % Convert MatLab neuron IDs to SpineCreator IDs
        [~, src] = ismember(connections.fsi.(f_dst)(:,1), list.fsi(:,1));
        [~, dst] = ismember(connections.fsi.(f_dst)(:,2), list.(f_dst)(:,1));

        % Create list of undirected FSI-MSN connections
        % FROM: FSIs
        % TO:   D1 or D2 MSNs
        % DELAY:As defined in connections.fsi.(f_dst)(:,3)
        connections.gaba.fsi.(f_dst) = [list.fsi(src,2)' ; list.(f_dst)(dst,2)' ; connections.fsi.(f_dst)(:,3)']';

        % Save connection lists
        if flags.save
            save_list(listpath, connections.gaba.fsi.(f_dst), name, flags);
        end   
    end
end

% From FSIs to FSIs (GABA)
name.src = 'Striatum_FSI';
name.dst = 'Striatum_FSI';
name.syn = 'syn0'; 
  
% If connections already exist, don't recreate
if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file') 
    % Convert MatLab neuron IDs to SpineCreator IDs
    [~, src] = ismember(connections.fsifsi(:,1), list.fsi(:,1));
    [~, dst] = ismember(connections.fsifsi(:,2), list.fsi(:,1));

    % Create list of undirected FSI-FSI GABA connections
    % FROM: FSIs
    % TO:   FSIs
    % DELAY:As defined in connections.fsifsi(:,3)
    connections.gaba.fsi.fsi = [list.fsi(src,2)' ; list.fsi(dst,2)' ; connections.fsifsi(:,3)']';

    % Save connection lists
    if flags.save
        save_list(listpath, connections.gaba.fsi.fsi, name, flags);
    end  

    % From FSIs to FSIs (Gap)
    % Convert MatLab neuron IDs to SpineCreator IDs
    try
        [~, src] = ismember(connections.gap(:,1), list.fsi(:,1));
        [~, dst] = ismember(connections.gap(:,2), list.fsi(:,1));
    catch
    end

    % Create list of FSI-FSI gap connections
    % Gap junctions have a nonstandard format
    % FROM: FSIs
    % TO:   FSIs
    % DELAY:N/A
    try
        connections.gap_sc.in1 =  [list.fsi(src,2)' ; 0 : num.gap - 1]';
        connections.gap_sc.in2 =  [list.fsi(dst,2)' ; 0 : num.gap - 1]';
        connections.gap_sc.out1 = [0 : num.gap - 1  ; list.fsi(src,2)']';
        connections.gap_sc.out2 = [0 : num.gap - 1  ; list.fsi(dst,2)']';        
    catch
        error('Could not create gap junctions!')
    end

    % Save connection lists
    if flags.save
        for i = 0:1
            g_in = sprintf('in%d', i + 1); 
            g_out = sprintf('out%d', i + 1); 

            name.syn = sprintf('syn%d', i);

            name.src = 'Striatum_FSI';               
            name.dst = 'FSI_GAP';
            save_list(listpath, connections.gap_sc.(g_in), name, flags);

            name.src = 'FSI_GAP';
            name.dst = 'Striatum_FSI';
            save_list(listpath, connections.gap_sc.(g_out), name, flags);        
        end
    end
end

if flags.progress
    fprintf('done! (%1.2fs)\n', toc(timer.conn3))
end

%% STRIATAL peptide connections
if flags.progress
    fprintf('4) Striatal peptide connections? ')
end
timer.conn4 = tic;

% Peptide projections always use syn1
name.syn = 'syn1';

% From both D1 and D2 MSNs
for i = 1:2
    d_src = sprintf('d%d', i); 
    name.src = sprintf('Striatum_D%d', i);
       
    % To both D1 and D2 MSNs
    for j = 1:2 
        d_dst = sprintf('d%d',j);
                
        % Empty arrays for diffuse, unidirectional and pruned connection lists
        connections.dff.(d_src).(d_dst) = [];
        connections.uni.(d_src).(d_dst) = [];       
        connections.prn.(d_src).(d_dst) = [];
          
        % If connections already exist, don't recreate
        name.sp = sprintf('Striatum_D%d (Diffuse)', j);
        name.enk = sprintf('Striatum_D%d', j);
        if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.sp, '_', name.syn, '.csv']), 'file') &&...
                ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.enk, '_', name.syn, '.csv']), 'file')
        
            % For each action channel
            for k = 1:attr.ch_seq
                ch_src = sprintf('ch%d', k);

                for l = 1:attr.ch_all
                    ch_dst = sprintf('ch%d', l);

                    % Create list of directional MSN-MSN connections
                    % FROM: D1 or D2 MSNs in channel k
                    % TO:   D1 or D2 MSNs in channel l
                    % DELAY:As defined in connections.(d_src).(d_dst)(:,3) 
                    tmp.(d_src).(d_dst) = ...
                        [ismember(connections.(d_src).all(:,1), list.(ch_src).(d_src)(:,1))' ; ...
                        ismember(connections.(d_src).all(:,2), list.(ch_dst).(d_dst)(:,1))']';

                    connections.(d_src).(ch_src).(d_dst).(ch_dst) = ...
                        connections.(d_src).all(tmp.(d_src).(d_dst)(:,1) & tmp.(d_src).(d_dst)(:,2), :);

                    % Convert MatLab neuron IDs to SpineCreator IDs
                    [~, src] = ismember(connections.(d_src).(ch_src).(d_dst).(ch_dst)(:,1), list.(ch_src).(d_src)(:,1));
                    [~, dst] = ismember(connections.(d_src).(ch_src).(d_dst).(ch_dst)(:,2), list.(ch_dst).(d_dst)(:,1));

                    connections.(d_src).(ch_src).(d_dst).(ch_dst) = ...
                        [list.(ch_src).(d_src)(src,2)' ; list.(ch_dst).(d_dst)(dst,2)' ; ...
                        connections.(d_src).(ch_src).(d_dst).(ch_dst)(:,3)']';

                    % Diffuse and pruned connections include all connections
                    connections.dff.(d_src).(d_dst) = [connections.dff.(d_src).(d_dst) ; ...
                        connections.(d_src).(ch_src).(d_dst).(ch_dst)];
                    connections.prn.(d_src).(d_dst) = [connections.prn.(d_src).(d_dst) ; ...
                        connections.(d_src).(ch_src).(d_dst).(ch_dst)];

                    % Unidirectional connection if source channel < number of
                    % channels in sequence AND dest. channel = (source channel + 1)
                    if l == (k+1) && k < attr.ch_seq
                        connections.uni.(d_src).(d_dst) = [connections.uni.(d_src).(d_dst) ; ...
                            connections.(d_src).(ch_src).(d_dst).(ch_dst)];
                    end  

                    % Connections to be pruned if source MSN is D1 and prune
                    % source and destination channels match those set by user
                    if i == 1 && k == attr.prn_src && l == attr.prn_dst                                      
                        connections.prn.(d_src).(d_dst)(ismember(connections.prn.(d_src).(d_dst), ...
                            connections.(d_src).(ch_src).(d_dst).(ch_dst), 'rows'),:) = [];
                    end
                end
            end
        
            % Save connection lists
            if flags.save
                % Only save differentiated lists for SP projections
                if i == 1
                    if ~isempty(connections.dff.(d_src).(d_dst))
                        name.dst = sprintf('Striatum_D%d (Diffuse)', j);
                        save_list(listpath, connections.dff.(d_src).(d_dst), name, flags);
                    end

                    if ~isempty(connections.prn.(d_src).(d_dst))
                        name.dst = sprintf('Striatum_D%d (Pruned)', j);
                        save_list(listpath, connections.prn.(d_src).(d_dst), name, flags);
                    end

                    if ~isempty(connections.uni.(d_src).(d_dst))
                        name.dst = sprintf('Striatum_D%d (Unidirectional)', j);
                        save_list(listpath, connections.uni.(d_src).(d_dst), name, flags);
                    end
                else
                    if ~isempty(connections.dff.(d_src).(d_dst))
                        name.dst = sprintf('Striatum_D%d', j);
                        save_list(listpath, connections.dff.(d_src).(d_dst), name, flags);
                    end
                end
            end
        end
    end   
end

if flags.progress
    fprintf('done! (%1.2fs)\n', toc(timer.conn4))
end

%% Save neuron list and connections to disk
timer.save = tic;
if flags.progress
    fprintf('\nSaving neuron and connection data? ')
end

filename = [striatum.dirname '/connections.mat'];
save(filename, 'connections', '-v7.3');

filename = [striatum.dirname '/list.mat'];
save(filename, 'list');
if flags.progress
    fprintf('took %1.2f minutes. All done!\n', toc(timer.save)/60)
end

if flags.progress
    fprintf('All connection lists generated in %1.2f minutes.\n', toc(timer.list) / 60)
end