#!/bin/bash
#$ -M d.r.buxton@sheffield.ac.uk
#$ -m ea
#$ -j y
#$ -o ~/logs/
#$ -e ~/logs/

# Define trial-specific descriptors
export M="bkMSN"
export F="bkFSI"
export C="wCH"

# Set defaults
export CHANNELS=1
export VAR_FSI=0
export VAR_MSN=0
export VAR_WCH=0
export NUM_VAR=5
export EXP_VAR=0

# Calculate the multiplier for each variable
get_id{
	# Each variable (bkFSI, bkMSN, wCH) has five possible values
	# The quotient of the current task ID and 5^(number of variables - 1) allows us to iterate over each one at the required intervals
	export ID=`echo "scale=0 ; (${SGE_TASK_ID} - 1) / (${NUM_VAR} ^ ${EXP_VAR})" | bc` 
	
	while [ "${ID}" -gt "${NUM_VAR}" ]; do
		export ID=`echo "scale=0 ; (${ID} - (${NUM_VAR} - 1)) / (${NUM_VAR} ^ ${EXP_VAR})" | bc` 
	done
	
	# Increment exponent value for next value
	export EXP_VAR=`echo ${EXP_VAR} + 1 | bc`
}

# Set variation flags and number of channels
while getopts ":c:f:m:w:" opt; do
	case $opt in
		c) CHANNELS=${OPTARG}
		;;
		f) 
			VAR_FSI=${OPTARG}
		  	if [ "${VAR_FSI}" -ne 0 ]
				get_id

				export FID=`echo "${ID} * 20" | bc`			
		  		printf "Background FSIs at ${FID}"
		  	fi
		;;
		m)
			VAR_MSN=${OPTARG}
		  	if [ "${VAR_MSN}" -ne 0 ]
				get_id
			
				export MID=`echo "${ID} * 20" | bc`		  		
				printf "Background MSNs at ${MID}"
		  	fi
		;;
		w)
			VAR_WCH=${OPTARG}
		  	if [[ ("${VAR_WCH}" -ne 0 && "${CHANNELS}" -gt 1) ]]; then
				get_id
			
				export CID=`echo "(${ID} + 1) * 20" | bc`		  		
				printf "Channel width at ${CID}"
		  	fi
		;;
		\?) echo "Invalid option -${OPTARG}" >&2
		;;
	esac
done




#
# # Modify trial ID based in input variables
# if [ -z "${1}" ]; then
# 	echo "Error: No batch variable set"
# 	exit 1
# elif [ -z "${2}" ]; then
# 	echo "Iterating over single batch variable '${1}'"
# 	i=${SGE_TASK_ID}
#
# 	# Default to 0 background MSN and FSIs
# 	MID="0"
# 	FID="0"
# 	CID=${i}
# else
# 	echo "Iterating batch variables '${1}' and '${2}'"
#
# 	# Set unique job ID based on SGE task ID
# 	export SGE_MOD_ID=$(echo "${SGE_TASK_ID} - 1" | bc)
# 	# Set MSN and FSI descriptor variants based on unique job ID
# 	# MSN descriptor from first digit, FSI descriptor from second digit
# 	i=$(echo "scale=0; ${SGE_MOD_ID}/10" | bc)"0"
# 	if (( ${i} == 00 )); then
# 		i=$(echo "${i: -1}")
# 	fi
#
# 	j=$(echo "${SGE_MOD_ID: -1}0")
# 	if (( ${j} == 00 )); then
# 		j=$(echo "${j: -1}")
# 	fi
#
# 	# Default to 50% channel width
# 	MID=${i}
# 	FID=${j}
# 	CID="50"
# fi


# Set unique trial identifier
if [ "${CHANNELS}" -gt 1 ]; then
	export XID=${M}${MID}"_"${F}${FID}"_"${C}${CID}
else
	export XID=${M}${MID}"_"${F}${FID}
fi
echo "Unique trial identifier:" ${XID}

# Set unique per-simulation work and output directories
export WORK_DIR="${WORK_ROOT}/${MODEL}/${XID}"
export OUTPUT_DIR="${OUTPUT_ROOT}/${MODEL}/${XID}"
echo "Working directory: ${WORK_DIR}"
echo "Output directory: ${OUTPUT_DIR}"

# Check for directory existence
if [ ! -d ${WORK_DIR} ]; then
    mkdir -p ${WORK_DIR}
else 
	echo "WARNING! Working directory already exists; proceeding anyway"
fi

# Create output directory
if [ ! -d ${OUTPUT_DIR} ]; then
	mkdir -p ${OUTPUT_DIR}
else
	echo "WARNING! Output directory already exists; proceeding anyway"
fi

# Model construction and execution loop
cd ${LISTS_DIR}

# For each connection list file containing trial XID…
echo ""
echo "Copying connection lists…"
for file in $(find . -maxdepth 1 -name "*${XID}.*"); do
	# Remove initial './'
    FILE_FULL=$(echo $file | sed "s|^\./||")
	
	# Remove trial-specific descriptors
    # FILE_TRIM=$(echo $FILE_FULL | sed "s/_bkMSN[0-9]\+_bkFSI[0-9]\+//")
	FILE_TRIM=$(echo $FILE_FULL | sed "s/_${M}[0-9]\+_${F}[0-9]\+_${C}[0-9]\+//")
	
	# Copy connection list to work directory with unique descriptors removed
	echo $file" → "${WORK_DIR}"/"${FILE_TRIM}
    cp $file ${WORK_DIR}/${FILE_TRIM}
done

# Copy other model files to work directory
cp -n ${MODEL_DIR}/* ${WORK_DIR}

# Rewrite model connection lists
echo ""
echo "Modifying model.xml…"
${SCRIPTS_DIR}/modify_connections.sh

# Execute model on SGE
echo ""
echo "Executing model '${MODEL}' experiment #${EXP_NO} version ${XID}…"

# cd ${S2B_DIR}
# export PATH=${PATH}:${HOME}/bin
# ${S2B_DIR}/convert_script_s2b -gs \
# 	-m ${WORK_DIR} -e ${EXP_NO} -w ${WORK_DIR} -o ${OUTPUT_DIR}
