#!/bin/bash
#$ -M d.r.buxton@sheffield.ac.uk
#$ -m ea
#$ -j y
#$ -o ~/logs/
#$ -e ~/logs/

# Define trial-specific descriptors
export M="bkMSN"
export F="bkFSI"
export C="wCH"

# Set defaults
export CHANNELS="1"
export VAR_FSI="0"
export VAR_MSN="0"
export VAR_WCH="0"
export NUM_VAR="5"
export EXP_VAR="0"

# Default to 0% background and 50% channel width
export MID="0"
export FID="0"
export CID="50"

# Calculate the multiplier for each variable
function get_id {
	# Each variable (bkFSI, bkMSN, wCH) has five possible values
	# The quotient of the current task ID and 5^(number of variables - 1) allows us to iterate over each one at the required intervals
	export ID=`echo "scale=0 ; (${SGE_TASK_ID} - 1) / (${NUM_VAR} ^ ${EXP_VAR})" | bc` 
	
	while [ "${ID}" -gt "${NUM_VAR}" ]; do
		export ID=`echo "scale=0 ; (${ID} - (${NUM_VAR} - 1)) / (${NUM_VAR} ^ ${EXP_VAR})" | bc` 
	done
	
	# Increment exponent value for next value
	export EXP_VAR=`echo ${EXP_VAR} + 1 | bc`
}

# Modify model.xml to include the correct number of connections
function modify_connections {
	# Go to simulation working directory
	cd ${WORK_DIR}

	# Check for existence of model.xml                                                            
	if [ ! -e model.xml ]; then                                                
		echo "No model.xml found in $(pwd); aborting."
	else
		echo "In ${WORK_DIR}:"
	
		# For every .bin file
		for file in *.bin; do
			# Break out of the loop if no .bin files exist                                            
			[ -f "$file" ] || break 			
			echo "••• ${file} found…"  
				
			# Get name of file without extension		                                            
			FILE_CSV=$(basename $file .bin).csv

			# If a corresponding CSV exists
			if [ -f ${FILE_CSV} ]; then  
				# Get the number of CSV rows                                                
				CSV_LINES=$(awk 'END{ print NR }' ${FILE_CSV})                  

				# Construct the string occurring immediately before the number of connections
				STR_MATCH=${file}'" num_connections="'

				# Correct the number of connections in model.xml                         
				sed -i "s/\(${STR_MATCH}\)[0-9]\+/\1${CSV_LINES}/" model.xml   				 
				echo "(✓) ${FILE_CSV} found (${CSV_LINES} connections)"
			else
				echo "(!) ${FILE_CSV} not found"                                
			fi
		done
	fi
}

# Set variation flags and number of channels
while getopts ":c:f:m:w:" opt; do
	case $opt in
		c) CHANNELS=${OPTARG}
		;;
		f) 
			VAR_FSI=${OPTARG}
		  	if [ "${VAR_FSI}" -ne 0 ]; then
				get_id
				export FID=`echo "${ID} * 20" | bc`			
		  	fi
		;;
		m)
			VAR_MSN=${OPTARG}
		  	if [ "${VAR_MSN}" -ne 0 ]; then
				get_id			
				export MID=`echo "${ID} * 20" | bc`		  		
		  	fi
		;;
		w)
			VAR_WCH=${OPTARG}
		  	if [[ ("${VAR_WCH}" -ne 0 && "${CHANNELS}" -gt 1) ]]; then
				get_id			
				export CID=`echo "(${ID} + 1) * 20" | bc`		  		
		  	fi
		;;
		\?) echo "Invalid option -${OPTARG}" >&2
		;;
	esac
done

# Set unique trial identifier
if [ "${CHANNELS}" -gt 1 ]; then
	export XID=${M}${MID}"_"${F}${FID}"_"${C}${CID}
else
	export XID=${M}${MID}"_"${F}${FID}
fi
echo "Unique trial identifier:" ${XID}

# Set unique per-simulation work and output directories
export WORK_DIR="${WORK_ROOT}/${MODEL}/${XID}"
export OUTPUT_DIR="${OUTPUT_ROOT}/${MODEL}/${XID}"
echo "Working directory: ${WORK_DIR}"
echo "Output directory: ${OUTPUT_DIR}"

# Check for directory existence
if [ ! -d ${WORK_DIR} ]; then
    mkdir -p ${WORK_DIR}
else 
	echo "WARNING! Working directory already exists; proceeding anyway"
fi

# Create output directory
if [ ! -d ${OUTPUT_DIR} ]; then
	mkdir -p ${OUTPUT_DIR}
else
	echo "WARNING! Output directory already exists; proceeding anyway"
fi

# Model construction and execution loop
# cd ${LISTS_DIR}
echo ""
echo "Copying connection lists…"
cp ${LISTS_DIR}/conn_* 			${WORK_DIR}
cp ${LISTS_DIR}/${XID}/conn_* 	${WORK_DIR}
# # TODO: Tidy this up
# cp conn_* ${WORK_DIR}
# cd ${XID}
# cp conn_* ${WORK_DIR}

# # For each connection list file containing trial XID…
# for file in $(find . -maxdepth 1 -name "*${XID}.*"); do
# 	# Remove initial './'
#     FILE_FULL=$(echo $file | sed "s|^\./||")
#
# 	# Remove trial-specific descriptors
#     # FILE_TRIM=$(echo $FILE_FULL | sed "s/_bkMSN[0-9]\+_bkFSI[0-9]\+//")
# 	FILE_TRIM=$(echo $FILE_FULL | sed "s/_${M}[0-9]\+_${F}[0-9]\+_${C}[0-9]\+//")
#
# 	# Copy connection list to work directory with unique descriptors removed
# 	echo $file" → "${WORK_DIR}"/"${FILE_TRIM}
#     cp $file ${WORK_DIR}/${FILE_TRIM}
# done

# Copy other model files to work directory
cp -n ${MODEL_DIR}/* ${WORK_DIR}

# Rewrite model connection lists
echo ""
echo "Modifying model.xml…"
# ${SCRIPTS_DIR}/modify_connections.sh
# Go to simulation working directory
cd ${WORK_DIR}

# Check for existence of model.xml                                                            
if [ ! -e model.xml ]; then                                                
	echo "No model.xml found in $(pwd); aborting."
else
	echo "In ${WORK_DIR}:"

	# For every .bin file
	for file in *.bin; do
		# Break out of the loop if no .bin files exist                                            
		[ -f "$file" ] || break 			
		echo "••• ${file} found…"  
			
		# Get name of file without extension		                                            
		FILE_CSV=$(basename $file .bin).csv

		# If a corresponding CSV exists
		if [ -f ${FILE_CSV} ]; then  
			# Get the number of CSV rows                                                
			CSV_LINES=$(awk 'END{ print NR }' ${FILE_CSV})                  

			# Construct the string occurring immediately before the number of connections
			STR_MATCH=${file}'" num_connections="'

			# Correct the number of connections in model.xml                         
			sed -i "s/\(${STR_MATCH}\)[0-9]\+/\1${CSV_LINES}/" model.xml   				 
			echo "(✓) ${FILE_CSV} found (${CSV_LINES} connections)"
		else
			echo "(!) ${FILE_CSV} not found"                                
		fi
	done
fi	

# Execute model on SGE
echo ""
echo "Executing model '${MODEL}' experiment #${EXP_NO} version ${XID}…"
cd ${S2B_DIR}
export PATH=${PATH}:${HOME}/bin
${S2B_DIR}/convert_script_s2b -gs -m ${WORK_DIR} -e ${EXP_NO} -w ${WORK_DIR} -o ${OUTPUT_DIR}
