function[connections, list] = gen_phys_connlist(striatum, connections, attr, flags)
% Assign MSNs as D1 or D2 and to a particular channel

% Append directory for connection lists
listpath = [striatum.dirname 'connection_lists/'];
mkdir(listpath);

% Start list timer
timer.list = tic;

% Create a list of all MSN, FSI, and D1 / D2 neuron IDs (without connections)
% Column 1 is the unique neuron ID in the striatum generated by MatLab
% Column 2 is the neuron's ID within that group required by SpineCreator
list.msn = unique(connections.msnmsn(:,1));
list.d1 = [list.msn(1 : ceil(length(list.msn) / 2))' ; 0 : ceil(length(list.msn) / 2) - 1]';
list.d2 = [list.msn(length(list.d1) + 1 : end)' ; 0 : floor(length(list.msn) / 2) - 1]';
list.fsi = sort(unique([unique(connections.fsifsi(:,1)) ; unique(connections.fsimsn(:,1))]));
list.fsi(:,2) = 0:length(list.fsi) - 1;

% Separate all MSN_MSN connections into D_type lists
timer.chans = tic;
if flags.progress
    fprintf('\nSeparating connections into channels? ');
end
connections.d1.all = connections.msnmsn((connections.msnmsn(:,1) <= max(list.d1(:,1))),:);
connections.d1.d1 = connections.d1.all((connections.d1.all(:,2) <= max(list.d1(:,1))),:);
connections.d1.d2 = connections.d1.all((connections.d1.all(:,2) > max(list.d1(:,1))),:);

connections.d2.all = connections.msnmsn((connections.msnmsn(:,1) > max(list.d1(:,1))),:);
connections.d2.d1 = connections.d2.all((connections.d2.all(:,2) <= max(list.d1(:,1))),:);
connections.d2.d2 = connections.d2.all((connections.d2.all(:,2) > max(list.d1(:,1))),:);

connections.fsi.d1 = connections.fsimsn((connections.fsimsn(:,2) <= max(list.d1(:,1))),:);
connections.fsi.d2 = connections.fsimsn((connections.fsimsn(:,2) > max(list.d1(:,1))),:);
if flags.progress
    fprintf('done! (%3.2fs)\n', toc(timer.chans))
end

% It's useful to know how many of each neuron type there are
num.d1 = size(list.d1, 1);
num.d2 = size(list.d2, 1);
num.msn = size(list.msn, 1);
num.fsi = size(list.fsi, 1);
num.gap = size(connections.gap, 1);

% (Approximate) number of MSNs of each type to leave as background only
num.bkg_msn = round(num.msn * (attr.bkg_msn / 100) / 2);

% (Approximate) number of FSIs to leave as background only
num.bkg_fsi = round(num.fsi * (attr.bkg_fsi / 100));

% Number of MSNs of each type and FSIs to put in each channel
% num.msn_ch = floor((num.msn / 2 - num.bkg) / attr.ch_all);
num.d1_ch = (num.d1 - num.bkg_msn) / attr.ch_all;
num.d2_ch = (num.d2 - num.bkg_msn) / attr.ch_all;
num.fsi_ch = num.fsi - num.bkg_fsi;

%% CORTICO-STRIATAL channel connections - Uses SpineCreator neuron IDs
if flags.progress
    fprintf('\nCreating connection lists:\n');
    fprintf('1) Cortical channel connections? ')
end
timer.conn1 = tic;

% Cortico-striatal connections differ based on number of input channels
if attr.ch_all == 1
    % In the single-channel model it doesn't matter which neurons don't
    % receive connections since neuron ID is not associated with location
    
    connections.cortex.ch1.d1 = [0 : num.d1_ch - 1; 0 : num.d1_ch - 1]';
    connections.cortex.ch1.d2 = [(0 : num.d2_ch) + num.d1_ch ; 0 : num.d2_ch - 1]';
    connections.cortex.ch1.fsi = [0 : num.fsi - 1; 0 : num.fsi - 1]';
    
%     connections.cortex.ch1.d1 = gen_list_allall(attr.ch_inputs, num.msn_ch);
%     connections.cortex.ch1.d2 = gen_list_allall(attr.ch_inputs, num.msn_ch);
%     connections.cortex.ch1.fsi = gen_list_allall(attr.ch_inputs, num.fsi_ch);
    
%     % Instead of an all-to-all list, let's try creating an explicit list
%     % where each neuron receives 250 afferents
%     total_msn_inputs = attr.ch_inputs * num.msn_ch
%     msn_input_list = [];
%     for i = 0:attr.ch_inputs:total_msn_inputs
%         n1 = i:i + (attr.ch_inputs - 1);
%         n2 = i / attr.ch_inputs;
% 
%         % Get length of each array
%         len1 = length(n1);
%         len2 = length(n2);
% 
%         % Create repeating lists containing all values the required number of times
%         l1 = repmat(n1', len2, 1);
%         l2 = repmat(n2', 1, len1)';
%         l2= l2(:);
% 
%         % Create all-to all list
%         %list = [l1' ; l2']';
% 
%         msn_input_list = [msn_input_list ; [l1' ; l2']'];
%     end
%     connections.cortex.ch1.d1 = msn_input_list;
%     connections.cortex.ch1.d2 = msn_input_list;
    
%     total_fsi_inputs = attr.ch_inputs * num.fsi_ch
%     fsi_input_list = [];
%     for i = 0:attr.ch_inputs:total_fsi_inputs
%         n1 = i:i + (attr.ch_inputs - 1);
%         n2 = i / attr.ch_inputs;
% 
%         % Get length of each array
%         len1 = length(n1);
%         len2 = length(n2);
% 
%         % Create repeating lists containing all values the required number of times
%         l1 = repmat(n1', len2, 1);
%         l2 = repmat(n2', 1, len1)';
%         l2= l2(:);
% 
%         % Create all-to all list
%         %list = [l1' ; l2']';
% 
%         fsi_input_list = [fsi_input_list ; [l1' ; l2']'];
%     end
%     connections.cortex.ch1.fsi = fsi_input_list;
    
    % Save connection lists
    if flags.save
        % For both D1 and D2 MSNs
        for j = 1:2           
            d_dst = sprintf('d%d', j);
            name.src = sprintf('CH1_input');
            name.dst = sprintf('Striatum_D%d', j);

            % Create both AMPA and NMDA connections to MSNs
            for k = 0:1          
                % Channel input
                
                name.syn = sprintf('syn%d_bkMSN%d_bkFSI%d', k, attr.bkg_msn, attr.bkg_fsi);
                save_list(listpath, connections.cortex.ch1.(d_dst), name, flags);
            end
        end

        % FSI populations only use a single synapse
        name.dst = 'Striatum_FSI';
        name.syn = sprintf('syn0_bkMSN%d_bkFSI%d', attr.bkg_msn, attr.bkg_fsi);
        save_list(listpath, connections.cortex.ch1.fsi, name, flags);
    end

elseif attr.ch_all == 2
    
    % TODO: EXPORT CH LISTS AS CO_ORDS FOR PLOTTING
    
    % Physically partition a two-channel striatum
    if flags.phys_ch  
        for i = 1:2
            % Set dynamic structure fieldname
            msn = sprintf('d%d', i);
            
            % MSNs assigned to channel 1 or 2 based on physical location on
            % striatal X-axis, modified based on overlap value. Negative
            % overlap creates a background-only gap between channels,
            % positive overlap creates a region with MSNs in both channels
            list.ch1.(msn) = list.(msn)(striatum.neurons(list.(msn)(:,1), 1) <= attr.size / 2 + (attr.size * attr.ch_overlap) / 2, :);
            list.ch2.(msn) = list.(msn)(striatum.neurons(list.(msn)(:,1), 1) >  attr.size / 2 + (attr.size * attr.ch_overlap) / 2, :);     

            for j = 1:attr.ch_all
                % Set dynamic structure fieldname
                ch = sprintf('ch%d', j);
                
                % Trim MSN and FSI lists according to requested background-only percentage
                list.(ch).(msn) = list.(ch).(msn)(1:end - (floor(size(list.(ch).(msn), 1) * (attr.bkg_msn / 100))),:);
                list.(ch).fsi = list.fsi(1:end - (floor(size(list.fsi, 1) * (attr.bkg_fsi / 100))),:);

                % Create channel connections to striatum
                % FROM: Each cortical channel (-1 for SpineCreator 0-indexing)
                % TO:   Each MSN or FSI in each channel
                % DELAY:N/A
                connections.cortex.(ch).(msn) = gen_list_allall(attr.ch_inputs, list.(ch).(msn)(:,2));
%                 connections.cortex.(ch).(msn) = [0 : length(list.(ch).(msn)) - 1 ; list.(ch).(msn)(:,2)']';
                connections.cortex.(ch).fsi = gen_list_allall(attr.ch_inputs, list.(ch).fsi(:,2));
%                 connections.cortex.(ch).fsi = [0 : num.fsi - 1 ; list.fsi(:,2)']';
            end
        end

%     % Normal procedure for non-partitioned multi-channel striatum    
    else  
        fprintf('New connections for non-partioned striatum not yet done')
%         % Position of the first and last neuron in the channel
%         ch_first = 1;
%         ch_last = num.msn_ch;
% 
%         for i = 1:attr.ch_all
%             % Set dynamic structure fieldname
%             ch = sprintf('ch%d', i);
% 
%             % The neurons structure contains a list of members of each channel
%             list.(ch).d1 = list.d1(ch_first : ch_last, :);
%             list.(ch).d2 = list.d2(ch_first : ch_last, :);
% 
%             % Create channel connections to striatum
%             % FROM: Each cortical channel (-1 for SpineCreator 0-indexing)
%             % TO:   Each MSN or FSI in each channel
%             % DELAY:N/A
%             connections.cortex.(ch).d1 = [0 : num.msn_ch - 1 ; list.(ch).d1(:,2)']';
%             connections.cortex.(ch).d2 = [0 : num.msn_ch - 1 ; list.(ch).d2(:,2)']';
%             connections.cortex.(ch).fsi= [0 : num.fsi - 1    ; list.fsi(:,2)'    ]'; 
% 
%             % Create channel connections to basal ganglia
%             % FROM: Each cortical channel (-1 for SpineCreator 0-indexing)
%             % TO:   Single BG neuron in each channel
%             % DELAY:N/A
%             if num.msn_ch > attr.max_bg
%                 connections.cortex.(ch).bg = [0 : attr.max_bg - 1 ; zeros(1, attr.max_bg) + (i - 1)]'; 
%             else
%                 connections.cortex.(ch).bg = [0 : num.msn_ch - 1 ; zeros(1, num.msn_ch) + (i - 1)]';  
%             end
% 
%             % Increment channel start/end markers for the next channel
%             ch_first = ch_last + 1;
%             ch_last = ch_last + num.msn_ch;
%         end
    end

    % Save connection lists
    if flags.save
        for i = 1:attr.ch_all
            % Set dynamic structure fieldname
            ch = sprintf('ch%d', i);       
            name.src = sprintf('CH%d_input', i);

            % For both D1 and D2 MSNs
            for j = 1:2           
                d_dst = sprintf('d%d', j);
                name.dst = sprintf('Striatum_D%d', j);

                % Create both AMPA and NMDA connections to MSNs
                for k = 0:1
                    name.syn = sprintf('syn%d_bkMSN%d_bkFSI%d_ovlp%d', k, attr.bkg_msn, attr.bkg_fsi, attr.ch_overlap);                
                    save_list(listpath, connections.cortex.(ch).(d_dst), name, flags);
                end
            end

            % FSIs only use a single synapse
            name.dst = 'Striatum_FSI';
            name.syn = sprintf('syn0_bkMSN%d_bkFSI%d_ovlp%d', attr.bkg_msn, attr.bkg_fsi, attr.ch_overlap);
            save_list(listpath, connections.cortex.(ch).fsi, name, flags);
        end
    end

elseif attr.ch_all > 2
    fprintf('3+ channel connectivity not yet done')
end

    
if flags.progress
    fprintf('done! (%1.2fs)\n', toc(timer.conn1))
end

% %% CORTICO-STRIATAL background connections - Uses SpineCreator neuron IDs
% if flags.progress
%     fprintf('2) Cortical background connections... ')
% end
% timer.conn2 = tic;
% 
% if attr.bkg_pct > 0
%     if flags.phys_ch
%         % Get (approximate) number of background neurons per channel and type
%         num.bkg_ch = round(num.bkg / 4);
%         
%         % Initialise BKG arrays
%         list.bkg.d1 = [];
%         list.bkg.d2 = [];
%         
%         for i = 1:2
%             % Set dynamic structure fieldname
%             msn = sprintf('d%d', i);
% 
%             % Get list of background-only MSNs (SpineCreator IDs only)
%             list.bkg.(msn) = [list.bkg.(msn) ; list.ch1.(msn)(end - num.bkg_ch : end, 2)];
%             list.bkg.(msn) = [list.bkg.(msn) ; list.ch2.(msn)(end - num.bkg_ch : end, 2)];
%             
%             % Remove background-only MSNs from channel lists
%             list.ch1.(msn)(end - num.bkg_ch : end, :) = [];
%             list.ch2.(msn)(end - num.bkg_ch : end, :) = [];
%         end
%          
%         % Get exact number of BKG connections
%         num.bkg = max(length(list.bkg.d1),  length(list.bkg.d2));
%         
%     else
%         % Mark first background neuron
%         bg_first = ch_first;
% 
%         % Get list of background-only MSNs
%         list.bkg.d1 = list.d1(bg_first : num.d1, :);
%         list.bkg.d2 = list.d2(bg_first : num.d2, :);
% 
%         % Get exact number of BKG connections
%         num.bkg = max(length(list.d1), length(list.d2));        
%     end
% 
%     % Create background connections to striatum
%     % FROM: Each background cortical source (-1 for SpineCreator 0-indexing)
%     % TO:   Each MSN or FSI
%     % DELAY:N/A
%     connections.cortex.bkg.d1 = [0 : num.d1 - 1  ; list.d1(:,2)']';
%     connections.cortex.bkg.d2 = [0 : num.d2 - 1  ; list.d2(:,2)']';
%     connections.cortex.bkg.fsi= [0 : num.fsi - 1 ; list.fsi(:,2)']';
% 
%     % Create background connections to basal ganglia
%     % FROM: Each background cortical source (-1 for SpineCreator 0-indexing)
%     % TO:   Each channel in BG
%     % DELAY:N/A
%     connections.cortex.bkg.bg = [];
%     for i = 1:attr.ch_all
%         if num.msn_ch > attr.max_bg
%             connections.cortex.bkg.bg = ...
%                 [connections.cortex.bkg.bg ; [0 : attr.max_bg - 1 ; zeros(1, attr.max_bg) + (i - 1)]']; 
%         else
%             connections.cortex.bkg.bg = ...
%                 [connections.cortex.bkg.bg ; [0 : num.msn_ch - 1 ; zeros(1, num.msn_ch) + (i - 1)]'];   
%         end
%     end
%        
%     % Save connection lists
%     if flags.save   
%         name.src = 'BKG_input';
%         
%         % For both D1 and D2 MSNs
%         for i = 1:2
%             d_dst = sprintf('d%d', i);
%             name.dst = sprintf('Striatum_D%d', i);
%             
%             % Create both AMPA and NMDA connections to MSNs
%             for j = 0:1
%                 name.syn = sprintf('syn%d', j);               
%                 save_list(listpath, connections.cortex.bkg.(d_dst), name, flags);
%             end
%         end
%         
%         % Other populations only use a single synapse
%         name.syn = 'syn0';
%         
%         % Cortex-FSI
%         name.dst = 'Striatum_FSI';
%         save_list(listpath, connections.cortex.bkg.fsi, name, flags);
%         
%         % Cortex-MCtx
%         name.dst = 'Motor_Cortex';
%         save_list(listpath, connections.cortex.bkg.bg, name, flags);
%         
%         % Cortex-STN
%         name.dst = 'STN';
%         save_list(listpath, connections.cortex.bkg.bg, name, flags);
%     end
% end
% 
% if flags.progress
%     fprintf('done! (%1.2fs)\n', toc(timer.conn2))
% end

%% STRIATAL GABA connections - Converts MatLab to SpineCreator neuron IDs
if flags.progress
    fprintf('2) Striatal GABA connections? ')
end
timer.conn3 = tic;

% From both D1 and D2 MSNs
for i = 1:2
    d_src = sprintf('d%d', i); 
    name.src = sprintf('Striatum_D%d', i);
    
    % GABA projections always use syn0
    name.syn = 'syn0';
       
    % To both D1 and D2 MSNs
    for j = 1:2 
        d_dst = sprintf('d%d',j);
        name.dst = sprintf('Striatum_D%d', j);
        
        % If connections already exist, don't recreate
        if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file')        
            % Convert MatLab neuron IDs to SpineCreator IDs
            [~, src] = ismember(connections.(d_src).(d_dst)(:,1), list.(d_src)(:,1));
            [~, dst] = ismember(connections.(d_src).(d_dst)(:,2), list.(d_dst)(:,1));

            % Create list of undirected MSN-MSN connections
            % FROM: D1 or D2 MSNs
            % TO:   D1 or D2 MSNs
            % DELAY:As defined in connections.(d_src).(d_dst)(:,3)
            connections.gaba.(d_src).(d_dst) = ...
                [list.(d_src)(src,2)' ; list.(d_dst)(dst,2)' ; connections.(d_src).(d_dst)(:,3)']';

            % Save connection lists
            if flags.save
                save_list(listpath, connections.gaba.(d_src).(d_dst), name, flags);
            end
        end
    end
    
    % From FSIs to MSNs
    f_dst = sprintf('d%d', i); 
    name.src = 'Striatum_FSI';
    name.dst = sprintf('Striatum_D%d', i);
    
    % If connections already exist, don't recreate
    if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file') 
        % Convert MatLab neuron IDs to SpineCreator IDs
        [~, src] = ismember(connections.fsi.(f_dst)(:,1), list.fsi(:,1));
        [~, dst] = ismember(connections.fsi.(f_dst)(:,2), list.(f_dst)(:,1));

        % Create list of undirected FSI-MSN connections
        % FROM: FSIs
        % TO:   D1 or D2 MSNs
        % DELAY:As defined in connections.fsi.(f_dst)(:,3)
        connections.gaba.fsi.(f_dst) = [list.fsi(src,2)' ; list.(f_dst)(dst,2)' ; connections.fsi.(f_dst)(:,3)']';

        % Save connection lists
        if flags.save
            save_list(listpath, connections.gaba.fsi.(f_dst), name, flags);
        end   
    end
end

% From FSIs to FSIs (GABA)
name.src = 'Striatum_FSI';
name.dst = 'Striatum_FSI';
name.syn = 'syn0'; 
  
% If connections already exist, don't recreate
if ~exist(sprintf([listpath, 'conn_', name.src, '_to_', name.dst, '_', name.syn, '.csv']), 'file') 
    % Convert MatLab neuron IDs to SpineCreator IDs
    [~, src] = ismember(connections.fsifsi(:,1), list.fsi(:,1));
    [~, dst] = ismember(connections.fsifsi(:,2), list.fsi(:,1));

    % Create list of undirected FSI-FSI GABA connections
    % FROM: FSIs
    % TO:   FSIs
    % DELAY:As defined in connections.fsifsi(:,3)
    connections.gaba.fsi.fsi = [list.fsi(src,2)' ; list.fsi(dst,2)' ; connections.fsifsi(:,3)']';

    % Save connection lists
    if flags.save
        save_list(listpath, connections.gaba.fsi.fsi, name, flags);
    end  

    % From FSIs to FSIs (Gap)
    % Convert MatLab neuron IDs to SpineCreator IDs
    try
        [~, src] = ismember(connections.gap(:,1), list.fsi(:,1));
        [~, dst] = ismember(connections.gap(:,2), list.fsi(:,1));
    catch
    end

    % Create list of FSI-FSI gap connections
    % Gap junctions have a nonstandard format
    % FROM: FSIs
    % TO:   FSIs
    % DELAY:N/A
    try
        connections.gap_sc.in1 =  [list.fsi(src,2)' ; 0 : num.gap - 1]';
        connections.gap_sc.in2 =  [list.fsi(dst,2)' ; 0 : num.gap - 1]';
        connections.gap_sc.out1 = [0 : num.gap - 1  ; list.fsi(src,2)']';
        connections.gap_sc.out2 = [0 : num.gap - 1  ; list.fsi(dst,2)']';        
    catch
        error('Could not create gap junctions!')
    end

    % Save connection lists
    if flags.save
        for i = 0:1
            g_in = sprintf('in%d', i + 1); 
            g_out = sprintf('out%d', i + 1); 

            name.syn = sprintf('syn%d', i);

            name.src = 'Striatum_FSI';               
            name.dst = 'FSI_GAP';
            save_list(listpath, connections.gap_sc.(g_in), name, flags);

            name.src = 'FSI_GAP';
            name.dst = 'Striatum_FSI';
            save_list(listpath, connections.gap_sc.(g_out), name, flags);        
        end
    end
end

if flags.progress
    fprintf('done! (%1.2fs)\n', toc(timer.conn3))
end

% %% STRIATAL GABA connections - Converts MatLab to SpineCreator neuron IDs
% if flags.progress
%     fprintf('3) Striatal GABA connections... ')
% end
% timer.conn3 = tic;
% 
% % From both D1 and D2 MSNs
% for i = 1:2
%     d_src = sprintf('d%d', i); 
%     name.src = sprintf('Striatum_D%d', i);
%     
%     % GABA projections always use syn0
%     name.syn = 'syn0';
%        
%     % To both D1 and D2 MSNs
%     for j = 1:2 
%         d_dst = sprintf('d%d',j);
%         name.dst = sprintf('Striatum_D%d', j);
%         
%         % Convert MatLab neuron IDs to SpineCreator IDs
%         [~, src] = ismember(connections.(d_src).(d_dst)(:,1), list.(d_src)(:,1));
%         [~, dst] = ismember(connections.(d_src).(d_dst)(:,2), list.(d_dst)(:,1));
%         
%         % Create list of undirected MSN-MSN connections
%         % FROM: D1 or D2 MSNs
%         % TO:   D1 or D2 MSNs
%         % DELAY:As defined in connections.(d_src).(d_dst)(:,3)
%         connections.gaba.(d_src).(d_dst) = ...
%             [list.(d_src)(src,2)' ; list.(d_dst)(dst,2)' ; connections.(d_src).(d_dst)(:,3)']';
%         
%         % Save connection lists
%         if flags.save
%             save_list(listpath, connections.gaba.(d_src).(d_dst), name, flags);
%         end
%     end
%     
%     % From FSIs to MSNs
%     f_dst = sprintf('d%d', i); 
%     name.src = 'Striatum_FSI';
%     name.dst = sprintf('Striatum_D%d', i);
%     
%     % Convert MatLab neuron IDs to SpineCreator IDs
%     [~, src] = ismember(connections.fsi.(f_dst)(:,1), list.fsi(:,1));
%     [~, dst] = ismember(connections.fsi.(f_dst)(:,2), list.(f_dst)(:,1));
%     
%     % Create list of undirected FSI-MSN connections
%     % FROM: FSIs
%     % TO:   D1 or D2 MSNs
%     % DELAY:As defined in connections.fsi.(f_dst)(:,3)
%     connections.gaba.fsi.(f_dst) = [list.fsi(src,2)' ; list.(f_dst)(dst,2)' ; connections.fsi.(f_dst)(:,3)']';
%     
%     % Save connection lists
%     if flags.save
%         save_list(listpath, connections.gaba.fsi.(f_dst), name, flags);
%     end   
%     
%     % From striatum to BG loop and from MCtx to striatum   
%     connections.uni.(d_src).bg = [];
%     connections.uni.bg.(d_src) = [];
%     connections.uni.bg.fsi = [];
%     
%     for j = 1:attr.ch_all
%         ch_src = sprintf('ch%d', j);
%         
%         % Create list of connections between striatum and BG loop
%         % FROM: D1 or D2 MSNs in channel j / MCtx neuron in channel j
%         % TO:   GPe or GPi neuron in channel j / D1 or D2 MSNs in channel j / All FSIs
%         % DELAY:N/A
%         if length(list.(ch_src).(d_src)) > attr.max_bg
%             connections.uni.(d_src).bg = [connections.uni.(d_src).bg ; ...
%                 [list.(ch_src).(d_src)(1 : attr.max_bg,2)' ; zeros(1, attr.max_bg) + (j - 1)]'                  ];
%         else
%             connections.uni.(d_src).bg = [connections.uni.(d_src).bg ; ...
%                 [list.(ch_src).(d_src)(:,2)'               ; zeros(1, length(list.(ch_src).(d_src))) + (j - 1)]'];           
%         end
%         
%         % Connections from BG back to striatum don't need to be limited
%         connections.uni.bg.(d_src) = ...
%             [connections.uni.bg.(d_src) ; [zeros(1, length(list.(ch_src).(d_src))) + (j - 1) ; list.(ch_src).(d_src)(:,2)']'];
%         
%         connections.uni.bg.fsi     = ...
%             [connections.uni.bg.fsi     ; [zeros(1, num.fsi) + (j - 1)                       ; list.fsi(:,2)']'             ];
%     end
%         
%     % Save striatum-BG connection lists    
%     if flags.save
%         name.src = sprintf('Striatum_D%d', i);
%         name.syn = 'syn0';        
%         switch i
%             case 1
%                 % D1 MSN to GPi/SNr
%                 name.dst = 'GPi_SNr';
%             case 2
%                 % D2 MSN to GPe
%                 name.dst = 'GPe';
%         end       
%         save_list(listpath, connections.uni.(d_src).bg, name, flags);  
%     end
%     
%     % Save MCtx-striatum connection lists    
%     if flags.save  
%         name.src = 'MCtx_R2S';
%         
%         % MCtx to FSI
%         name.dst = 'Striatum_FSI';
%         name.syn = 'syn0';
%         save_list(listpath, connections.uni.bg.fsi, name, flags);
%         
%         % MCtx to Striatum
%         name.dst = sprintf('Striatum_D%d', i);
%         for j = 0:1
%             name.syn = sprintf('syn%d', j);
%             save_list(listpath, connections.uni.bg.(d_src), name, flags);
%         end          
%     end
% end
% 
% % From FSIs to FSIs (GABA)
% name.src = 'Striatum_FSI';
% name.dst = 'Striatum_FSI';
% name.syn = 'syn0'; 
%     
% % Convert MatLab neuron IDs to SpineCreator IDs
% [~, src] = ismember(connections.fsifsi(:,1), list.fsi(:,1));
% [~, dst] = ismember(connections.fsifsi(:,2), list.fsi(:,1));
% 
% % Create list of undirected FSI-FSI GABA connections
% % FROM: FSIs
% % TO:   FSIs
% % DELAY:As defined in connections.fsifsi(:,3)
% connections.gaba.fsi.fsi = [list.fsi(src,2)' ; list.fsi(dst,2)' ; connections.fsifsi(:,3)']';
% 
% % Save connection lists
% if flags.save
%     save_list(listpath, connections.gaba.fsi.fsi, name, flags);
% end  
% 
% % From FSIs to FSIs (Gap)
% % Convert MatLab neuron IDs to SpineCreator IDs
% [~, src] = ismember(connections.gap(:,1), list.fsi(:,1));
% [~, dst] = ismember(connections.gap(:,2), list.fsi(:,1));
% 
% % Create list of FSI-FSI gap connections
% % Gap junctions have a nonstandard format
% % FROM: FSIs
% % TO:   FSIs
% % DELAY:N/A
% try
%     connections.gap_sc.in1 =  [list.fsi(src,2)' ; 0 : num.gap - 1]';
%     connections.gap_sc.in2 =  [list.fsi(dst,2)' ; 0 : num.gap - 1]';
%     connections.gap_sc.out1 = [0 : num.gap - 1  ; list.fsi(src,2)']';
%     connections.gap_sc.out2 = [0 : num.gap - 1  ; list.fsi(dst,2)']';        
% catch
%     error('Could not create gap junctions!')
% end
% 
% % Save connection lists
% if flags.save
%     for i = 0:1
%         g_in = sprintf('in%d', i + 1); 
%         g_out = sprintf('out%d', i + 1); 
%         
%         name.syn = sprintf('syn%d', i);
%         
%         name.src = 'Striatum_FSI';               
%         name.dst = 'FSI_GAP';
%         save_list(listpath, connections.gap_sc.(g_in), name, flags);
%                               
%         name.src = 'FSI_GAP';
%         name.dst = 'Striatum_FSI';
%         save_list(listpath, connections.gap_sc.(g_out), name, flags);        
%     end
% end
% 
% if flags.progress
%     fprintf('done! (%1.2fs)\n', toc(timer.conn3))
% end

% %% STRIATAL peptide connections
% if flags.progress
%     fprintf('4) Striatal peptide connections... ')
% end
% timer.conn4 = tic;
% 
% % Peptide projections always use syn1
% name.syn = 'syn1';
% 
% % From both D1 and D2 MSNs
% for i = 1:2
%     d_src = sprintf('d%d', i); 
%     name.src = sprintf('Striatum_D%d', i);
%        
%     % To both D1 and D2 MSNs
%     for j = 1:2 
%         d_dst = sprintf('d%d',j);
%                 
%         % Empty arrays for diffuse, unidirectional and pruned connection lists
%         connections.dff.(d_src).(d_dst) = [];
%         connections.uni.(d_src).(d_dst) = [];       
%         connections.prn.(d_src).(d_dst) = [];
%                 
%         % For each action channel
%         for k = 1:attr.ch_seq
%             ch_src = sprintf('ch%d', k);
%             
%             for l = 1:attr.ch_all
%                 ch_dst = sprintf('ch%d', l);
% 
%                 % Create list of directional MSN-MSN connections
%                 % FROM: D1 or D2 MSNs in channel k
%                 % TO:   D1 or D2 MSNs in channel l
%                 % DELAY:As defined in connections.(d_src).(d_dst)(:,3) 
%                 tmp.(d_src).(d_dst) = ...
%                     [ismember(connections.(d_src).all(:,1), list.(ch_src).(d_src)(:,1))' ; ...
%                     ismember(connections.(d_src).all(:,2), list.(ch_dst).(d_dst)(:,1))']';
% 
%                 connections.(d_src).(ch_src).(d_dst).(ch_dst) = ...
%                     connections.(d_src).all(tmp.(d_src).(d_dst)(:,1) & tmp.(d_src).(d_dst)(:,2), :);
%                
%                 % Convert MatLab neuron IDs to SpineCreator IDs
%                 [~, src] = ismember(connections.(d_src).(ch_src).(d_dst).(ch_dst)(:,1), list.(ch_src).(d_src)(:,1));
%                 [~, dst] = ismember(connections.(d_src).(ch_src).(d_dst).(ch_dst)(:,2), list.(ch_dst).(d_dst)(:,1));
% 
%                 connections.(d_src).(ch_src).(d_dst).(ch_dst) = ...
%                     [list.(ch_src).(d_src)(src,2)' ; list.(ch_dst).(d_dst)(dst,2)' ; ...
%                     connections.(d_src).(ch_src).(d_dst).(ch_dst)(:,3)']';
%                         
%                 % Diffuse and pruned connections include all connections
%                 connections.dff.(d_src).(d_dst) = [connections.dff.(d_src).(d_dst) ; ...
%                     connections.(d_src).(ch_src).(d_dst).(ch_dst)];
%                 connections.prn.(d_src).(d_dst) = [connections.prn.(d_src).(d_dst) ; ...
%                     connections.(d_src).(ch_src).(d_dst).(ch_dst)];
%         
%                 % Unidirectional connection if source channel < number of
%                 % channels in sequence AND dest. channel = (source channel + 1)
%                 if l == (k+1) && k < attr.ch_seq
%                     connections.uni.(d_src).(d_dst) = [connections.uni.(d_src).(d_dst) ; ...
%                         connections.(d_src).(ch_src).(d_dst).(ch_dst)];
%                 end  
%                 
%                 % Connections to be pruned if source MSN is D1 and prune
%                 % source and destination channels match those set by user
%                 if i == 1 && k == attr.prn_src && l == attr.prn_dst                                      
%                     connections.prn.(d_src).(d_dst)(ismember(connections.prn.(d_src).(d_dst), ...
%                         connections.(d_src).(ch_src).(d_dst).(ch_dst), 'rows'),:) = [];
%                 end
%             end
%         end
%         
%         % Save connection lists
%         if flags.save
%             % Only save differentiated lists for SP projections
%             if i == 1
%                 name.dst = sprintf('Striatum_D%d (Diffuse)', j);
%                 save_list(listpath, connections.dff.(d_src).(d_dst), name, flags);
% 
%                 name.dst = sprintf('Striatum_D%d (Pruned)', j);
%                 save_list(listpath, connections.prn.(d_src).(d_dst), name, flags);
% 
%                 name.dst = sprintf('Striatum_D%d (Unidirectional)', j);
%                 save_list(listpath, connections.uni.(d_src).(d_dst), name, flags);
%             else
%                 name.dst = sprintf('Striatum_D%d', j);
%                 save_list(listpath, connections.dff.(d_src).(d_dst), name, flags);
%             end
%         end
%     end   
% end
% 
% if flags.progress
%     fprintf('done! (%1.2fs)\n', toc(timer.conn4))
% end

%% Save neuron list and connections to disk
timer.save = tic;
if flags.progress
    fprintf('\nSaving neuron and connection data? ')
end

filename = [striatum.dirname '/connections.mat'];
save(filename, 'connections', '-v7.3');

filename = [striatum.dirname '/list.mat'];
save(filename, 'list');
if flags.progress
    fprintf('took %1.2f minutes. All done!\n', toc(timer.save)/60)
end

if flags.progress
    fprintf('All connection lists generated in %1.2f minutes.\n', toc(timer.list) / 60)
end